/*
 *  ARActivity.java
 *  ARToolKit5
 *
 *  This file is part of ARToolKit.
 *
 *  Copyright 2015-2016 Daqri, LLC.
 *  Copyright 2011-2015 ARToolworks, Inc.
 *
 *  Author(s): Thorsten Bux, Philip Lamb
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package org.artoolkit.ar6.base.rendering.shader_impl;

import android.opengl.GLES20;

import org.artoolkit.ar6.base.rendering.OpenGLShader;
import org.artoolkit.ar6.base.rendering.ShaderProgram;

import java.nio.ByteBuffer;
import java.nio.FloatBuffer;

/**
 * Created by Thorsten Bux on 21.01.2016.
 *
 * The shader program links together the vertex shader and the fragment shader and compiles them.
 * It also is responsible for binding the attributes. Attributes can be used to pass in values to the
 * shader during runtime.
 *
 * Finally it renders the given geometry.
 */
public class SimpleShaderProgram extends ShaderProgram {

    /**
     * Constructor for the shader program. Most of the work is done in the {@link ShaderProgram} directly.
     * @param vertexShader Vertex shader used to transform the rendered geometry
     * @param fragmentShader Fragment shader used to color the rendered geometry
     */
    public SimpleShaderProgram(OpenGLShader vertexShader, OpenGLShader fragmentShader) {
        super(vertexShader, fragmentShader);
        bindAttributes();
    }

    /**
     * Get the projection matrix handle from the shader. This handel is used later to pass in the
     * projection matrix to the vertex shader.
     * @return The handle for the projection matrix
     */
    @Override
    public int getProjectionMatrixHandle() {
        return GLES20.glGetUniformLocation(shaderProgramHandle, OpenGLShader.projectionMatrixString);
    }

    /**
     * Get the model view matrix handle from the shader. This handel is used later to pass in the
     * model view matrix to the vertex shader.
     * @return The handle for the model view matrix
     */
    @Override
    public int getModelViewMatrixHandle() {
        return GLES20.glGetUniformLocation(shaderProgramHandle, OpenGLShader.modelViewMatrixString);
    }

    /**
     * Binds the configurable attributes from the fragment and vertex shader to a specified int value.
     */
    @Override
    protected void bindAttributes() {
        // Bind attributes
        GLES20.glBindAttribLocation(shaderProgramHandle, 0, OpenGLShader.positionVectorString);
        GLES20.glBindAttribLocation(shaderProgramHandle, 1, SimpleVertexShader.colorVectorString);
    }

    /**
     *
     * @return The handle for the position of the geometry. Used later to pass in the position of
     * the marker that comes from the ARToolKit.
     */
    private int getPositionHandle() {
        return GLES20.glGetAttribLocation(shaderProgramHandle, OpenGLShader.positionVectorString);
    }

    /**
     * @return The handle for the color of the geometry. Used later to pass in the color of
     * the geometry.
     */
    private int getColorHandle() {
        return GLES20.glGetAttribLocation(shaderProgramHandle, SimpleVertexShader.colorVectorString);
    }

    /**
     * There are several render methods available from the base class. In this case we override the {@link ShaderProgram#render(FloatBuffer, FloatBuffer, ByteBuffer)} one.
     * Although we never use the index ByteBuffer.
     * We pass in the vertex and color information from the {@link org.artoolkit.ar6.base.rendering.shader_impl.Line} object.
     *
     * @param vertexBuffer Contains the position information as two vertexes. Start and end of the line to draw
     * @param colorBuffer  Contains the color of the line
     * @param indexBuffer TODO
     */
    @Override
    public void render(FloatBuffer vertexBuffer, FloatBuffer colorBuffer, ByteBuffer indexBuffer) {
        setupShaderUsage();

        vertexBuffer.position(0);
        /**
         * We use the OpenGL methods to set the vertex information in the following order.
         * 1. The handle generated by the {@link SimpleShaderProgram}
         * 2. Size of the position information. As we operate in 3D space this is 3 (x,y,z) (but for OpenGL and matrix operations it could also be 4, as you need a 4 size vector for 4x4 matrix operations).
         * 3. Kind of the vector position data (Float, Double)
         * 4. Is the vector normalized?
         * 5. The distance in Bytes between each vertex information including the vertex itself. First
         *      thing to remember here is that we are very close to C programming. That is why everything
         *      is handled in bytes and why we try and optimize things. The other thing is that you might want
         *      to use your vertexBuffer as container for position and color information (eg: [pos(x,y,z),color(r,g,b),pos(x,y,z),...])
         *      That is why you need to specify the distance between each vertex. In this case the vertexBuffer only holds the position information
         *      So the distance in byte is position size (3 as described in point 2.) multiplied with bytes per float (4)
         * 6. The vertex information itself.
         */
        //camPosition.length * 4 bytes per float
        GLES20.glVertexAttribPointer(this.getPositionHandle(), positionDataSize, GLES20.GL_FLOAT, false,
                positionStrideBytes, vertexBuffer);
        GLES20.glEnableVertexAttribArray(this.getPositionHandle());

        if(colorBuffer != null) {
            // Pass in the color information
            colorBuffer.position(0);
            /** Pass the color information to OpenGL
             * 1. The handle generated by the {@link MarkerDistanceShaderProgram}
             * 2. Pass in 1 as count of color vertexes (my line has only one color)
             * 3. The color information itself.
             */
            GLES20.glVertexAttribPointer(this.getColorHandle(), colorDataSize, GLES20.GL_FLOAT, false,
                    colorStrideBytes, colorBuffer);

            GLES20.glEnableVertexAttribArray(this.getColorHandle());
        }

        if(indexBuffer != null) {
            //Finally draw the geometry as triangles
            //The geometry consists of 36 points (indexBuffer.limit()) each represented by a x,y,z vector
            //The index buffer tells the renderer how the vector points are combined together.
            //eg. combine vertex 1,2,3 for the first triangle (vertex) and 2,3,4 for the next triangle, ...
            GLES20.glDrawElements(GLES20.GL_TRIANGLES, indexBuffer.limit(), GLES20.GL_UNSIGNED_BYTE, indexBuffer);
        }
    }
}
